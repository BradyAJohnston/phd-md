[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "md",
    "section": "",
    "text": "Preface\nThis is a Quarto book.\nTo learn more about Quarto books visit https://quarto.org/docs/books."
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  Introduction",
    "section": "",
    "text": "This is a book created from markdown and executable code.\nSee Knuth (1984) for additional discussion of literate programming.\n\n\n\n\nKnuth, Donald E. 1984. “Literate Programming.” Comput. J. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97."
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "2  Summary",
    "section": "",
    "text": "In summary, this book has no content whatsoever."
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Knuth, Donald E. 1984. “Literate Programming.” Comput.\nJ. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97."
  },
  {
    "objectID": "trajectory-analysis.html",
    "href": "trajectory-analysis.html",
    "title": "3  Untitled",
    "section": "",
    "text": "Importing of MD trajectories.\nPotential useful links: - Example .pynb of MetaD analysis\n\nlibrary(tidyverse)\n\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.4.0      ✔ purrr   0.3.5 \n✔ tibble  3.1.8      ✔ dplyr   1.0.10\n✔ tidyr   1.2.1      ✔ stringr 1.4.1 \n✔ readr   2.1.3      ✔ forcats 0.5.2 \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n\nfiles <- list.files(\".\", pattern = \"COLVAR\", recursive = TRUE)\n\ncolvar <- tibble(files) |> \n  mutate(\n    run = str_extract(files, 'BAJ_\\\\d{1,2}|protein'), \n    rep = str_detect(files, fixed('repeat', ignore_case = TRUE)), \n    rna = as.numeric(str_extract(run, '\\\\d+'))\n  )\n\ncolvar_1 <- colvar |> \n  filter(rna == 1) |> \n  pull(files) |> \n  mdfret::readcolvar()\n\n\nplot_colvar <- function(x) {\n  x |> \n  slice_sample(prop = 0.01) |> \n  janitor::clean_names() |> \n  pivot_longer(contains('rmsd')) |> \n  ggplot(aes(time / 1e3, value, colour = name)) + \n  geom_line() + \n  theme_bw() + \n  # scale_x_continuous(labels = ~.x / 1e3, name = \"Time (ns)\") + \n  # scale_y_continuous(name = 'RMSD') + \n  scale_colour_discrete(\n    name = 'Model Comparison',\n    labels = ~c(\n      'rmsd0' = 'Bound', \n      'rmsd1' = 'APO'\n    )[.x]\n  )\n  \n}\n\ncol <- colvar |> \n  filter(run %in% c(\"BAJ_01\", \"protein\")) |> \n  mutate(\n    data = map(files, mdfret::readcolvar)\n  )\n\n\ncol |> \n  unnest(data) |> \n  plot_colvar() + \n  facet_wrap(~run, ncol = 1, labeller = labeller(run = ~c(\n    \"BAJ_01\" = \"RNA01\", \n    \"protein\" = \"noRNA\"\n  )[.x])) + \n  theme(legend.position = 'bottom') + \n  labs(\n    x = 'Simulation Time (ns)', \n    y = 'RMSD (Å)'\n  )\n\n\n\n\nSave out a subset of the data for plotting in the thesis.\n\nif (FALSE) {\ncol |> \n  unnest(data) |> \n  slice_sample(prop = 0.01) |> \n  write_csv('../thesis/figures/data/md/md_colvar.csv')\n}\n\nWhat about the sampling.\n\ncol |> \n  unnest(data) |> \n  mutate(\n    run = factor(run, \n                 levels = c('protein', 'BAJ_01'), \n                 labels = c('Protein Only', \"RNA01\"))\n    ) |> \n  ggplot(aes(\n    path.sss, \n    path.zzz,\n    colour = time / 1e3\n  )) + \n  geom_point(alpha = 0.05, size = 0.1) + \n  scale_colour_viridis_c(option = 1, breaks = c(0, 200, 400, 600)) + \n  scale_x_continuous(breaks = 1:10) +\n  facet_wrap(~run, ncol = 2) + \n  labs(\n    colour = 'Simulation Time (s)'\n  ) + \n  theme_bw() + \n  theme(\n    legend.position = \"bottom\"\n  )\n\n\n\n\n\ncol |> \n  unnest(data) |> \n  mutate(\n    run = factor(run, \n                 levels = c('protein', 'BAJ_01'), \n                 labels = c('Protein Only', \"RNA01\"))\n  ) |> \n  pivot_longer(matches('bias')) |> \n  ggplot(aes(time / 1e3, value, colour = run)) + \n  geom_line() + \n  facet_grid(\n    cols = vars(run), \n    row = vars(name), \n     scales = 'free_y'\n  ) + \n  \n  labs(\n    x = 'Simulation Time (ns)', \n    y = 'Bias Value', \n    colour = 'Simulation'\n  ) + \n  \n  theme_bw() + \n  theme(\n    legend.position = 'bottom'\n  )\n\n\n\n\n\nfl <- 'data/BAJ_01/fes_500000.dat'\nfl_norna <- 'data/protein/protein_metad/fes_600000.dat'\n\nmdfret::readfes(fl_norna) |>\n  mutate(\n    ff1 = ifelse(is.infinite(ff1), NA, ff1), \n    ff1 = ff1 - min(ff1, na.rm = TRUE), \n    ff1 = scales::oob_squish(ff1, c(0, 50))\n    ) |> \n  ggplot(aes(sss.sss, zzz.zzz,  fill = ff1)) + \n  geom_raster() + \n  scale_x_continuous(breaks = 1:10, expand = expansion()) + \n  scale_fill_viridis_c(option = 2, direction = -1, na.value = 'transparent') + \n  coord_cartesian(xlim = c(0, 11)) + \n  theme_bw() + \n  theme(\n    panel.ontop = TRUE, \n    panel.grid = element_line(colour = scales::alpha('white', 0.3)),\n    panel.background = element_blank()\n  )\n\nWarning: Raster pixels are placed at uneven horizontal intervals and will be shifted\nℹ Consider using `geom_tile()` instead.\n\n\n\n\n\n\ntibble(\n  run = c('noRNA', 'RNA01'), \n  path = c(\"data/protein/protein_metad/HILLS\", \n           \"data/BAJ_01/HILLS\")\n) |> \n  mutate(\n    data = map(path, mdfret::readhills)\n  ) -> dat\n\ndat |> \n  unnest(data) |> \n  ggplot(aes(time / 1e3, height, colour = run)) +\n  geom_line() + \n  facet_grid(\n    rows = vars(run), \n    scales = \"free_y\"\n  ) + \n  \n  labs(\n    x = 'Simulation Time (ns)'\n  ) + \n  \n  theme_bw() + \n  theme(\n    legend.position = 'bottom'\n  )"
  }
]